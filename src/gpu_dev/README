README
-------------------------------------------------------------------------------

Notes on notation:

A Hungarian-esque notation is used here. Example:

#define DEF_NFFT    1024    /* 'DEF_' denotes default values */

int g_iVar; /* global variable */

<ret-type> Function(<args>)
{
    float fVar;
    int iVar;
    double dVar;

    /* CUDA types */
    char4 c4Var;
    float2 f2Var;
    dim3 dimVar;

    /* pointers */
    char *pcVar;
    int *piVar;

    /* arrays */
    float afVarArray[10];

    ...
}

-------------------------------------------------------------------------------

s6_gpu_standalone:

System requirements: Linux PC with a Fermi-architecture GPU, CUDA 4.0 with
CUFFT library, PGPLOT library (if PGPLOT flag is turned on - see below)

Usage: s6_gpu_standalone [options] <data-file>
    -h  --help                           Display this usage information
    -n  --nfft <value>                   Number of points in FFT
    -a  --nacc <value>                   Number of spectra to add
    -s  --fsamp <value>                  Sampling frequency (used only in
                                                             plots)

This code reads 8-bit, complex, dual-polarisation, n-sub-band data from a
user-specified file, loads the entire contents of the file to memory (that
restricts the max. file size), and does FFT on the data, and accumulates
spectra. The number of spectra to accumulate is user-specified.

Data is two's-complement 8-bit values in the range [-128, 127] (that are
actually 8_7 fixed-point values in the range [-1.0, +0.992188]. The samples are
interleaved, like so:

Real(X-pol.), Imag(X-pol.), Real(Y-pol.), Imag(Y-pol.)

They are read into a CUDA char4 array as follows:

char4 c4Data;

c4Data.x = Real(X-pol.)
c4Data.y = Imag(X-pol.)
c4Data.z = Real(Y-pol.)
c4Data.w = Imag(Y-pol.)

There are three compilation flags defined in s6_gpu_standalone.h:

PLOT: If set to non-zero value, will use PGPLOT to plot spectra
BENCHMARKING: If set to non-zero value, will calculate and print kernel
              benchmarks.

The main logic, in pseudo-code, is as follows:

Initialise stuff, including copying of first block to device memory
while(Data-processing-not-done)
{
    Copy char4 array to float4 array (CUFFT requires float input)

    Do FFT

    Accumulate spectra
    if (Time to dump spectrum)  /*  measured in terms of number of accumulated
                                    spectra */
    {
        Copy accumulated vector back to host
    }

    if (Data-is-processed)
    {
        Copy next block of data to device memory
    }
    else
    {
        continue;
    }
}

-------------------------------------------------------------------------------

s6_gentestdata.c:

System requirements: Linux PC

Usage: s6_gentestdata [options] <data-file>
    -h  --help                           Display this usage information
    -n  --nsamp <value>                  Number of time samples

Program to generate test data for the SERENDIP6 standalone implementations. The
test data is made up of 1-byte signed values in the range -128 to 127 that may
be interpreted by the SERENDIP6 programs to be 8_7 fixed-point values in the range
[-1.0, 0.992188]. The SERENDIP6 standalone implementations treat this data as
interleaved, complex, dual-polarisation data, with an arbitrary number of
sub-bands.

This program has to be manually edited to change input tone frequencies, add
sweeping signals, etc.

-------------------------------------------------------------------------------
